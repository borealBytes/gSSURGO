name: Python CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for specified branches
  push:
    branches:
      - main
      - test
      - 'feature/**'
      - 'bugfix/**'
  # Triggers the workflow on pull request events targeting main or test branches
  pull_request:
    branches: [ main, test ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Run tests on multiple Python versions if needed
        python-version: ["3.10"] # Match requires-python in pyproject.toml

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Sets up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Installs dependencies including development tools (pytest, ruff, build)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      # Runs the linter (Ruff)
      - name: Lint with Ruff
        run: |
          ruff check .

      # Runs the tests (pytest)
      - name: Test with pytest
        run: |
          pytest

      # Builds the source distribution and wheel
      # This verifies the package build process works
      - name: Build package
        run: python -m build

      # Upload the built package artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  publish_to_testpypi:
    name: Publish to TestPyPI
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for trusted publishing
    # Trigger only on push to test branch, NOT on pull requests
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/test' }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No password needed, uses trusted publishing via OIDC
        # Ensure you have configured trusted publishing in TestPyPI settings
        # with:
        #   repository-url: https://test.pypi.org/legacy/

  publish_to_pypi:
    name: Publish to PyPI
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for trusted publishing
    # Trigger only on push to main branch, NOT on pull requests
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No password needed, uses trusted publishing via OIDC
        # Ensure you have configured trusted publishing in PyPI settings

      # Optional: Create GitHub Release Tag after successful PyPI publish
      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref_name }} # Assumes tag name matches branch name (e.g., v1.0.0) - adjust as needed
      #     release_name: Release ${{ github.ref_name }}
      #     draft: false
      #     prerelease: false